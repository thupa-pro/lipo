import * as React from \"react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { Sparkles, Check, X, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\nconst aiSuggestionVariants = cva(\n  \"relative overflow-hidden transition-all duration-300 group\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-glass border border-glass-border backdrop-blur-glass rounded-xl p-4 shadow-glass hover:bg-glass-strong hover:shadow-glass-lg\",\n        premium: \"bg-glass border border-glass-border backdrop-blur-glass rounded-xl p-4 shadow-glass-lg hover:bg-glass-strong hover:shadow-premium hover:-translate-y-1\",\n        ai: \"bg-gradient-to-r from-blue-50/50 to-purple-50/50 dark:from-blue-950/20 dark:to-purple-950/20 border border-blue-200/50 dark:border-blue-800/50 rounded-xl p-4 shadow-lg hover:shadow-glow-primary\",\n        floating: \"bg-glass border border-glass-border backdrop-blur-glass rounded-xl p-4 shadow-glass-lg animate-float hover:shadow-premium\",\n      },\n      size: {\n        default: \"p-4\",\n        sm: \"p-3\",\n        lg: \"p-6\",\n      },\n      urgency: {\n        low: \"\",\n        medium: \"ring-2 ring-amber-500/20\",\n        high: \"ring-2 ring-red-500/20 animate-glow-pulse\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n      urgency: \"low\",\n    },\n  }\n)\n\nexport interface AISuggestionProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof aiSuggestionVariants> {\n  title: string\n  description?: string\n  confidence?: number\n  onAccept?: () => void\n  onDismiss?: () => void\n  actions?: React.ReactNode\n  icon?: React.ReactNode\n  thinking?: boolean\n  autoAction?: {\n    label: string\n    action: () => void\n    delay?: number\n  }\n}\n\nconst AISuggestion = React.forwardRef<HTMLDivElement, AISuggestionProps>(\n  ({\n    className,\n    variant,\n    size,\n    urgency,\n    title,\n    description,\n    confidence,\n    onAccept,\n    onDismiss,\n    actions,\n    icon,\n    thinking,\n    autoAction,\n    ...props\n  }, ref) => {\n    const [isVisible, setIsVisible] = React.useState(true)\n    const [autoActionProgress, setAutoActionProgress] = React.useState(0)\n    \n    // Auto action countdown\n    React.useEffect(() => {\n      if (autoAction && isVisible) {\n        const delay = autoAction.delay || 5000\n        const interval = 50\n        const steps = delay / interval\n        \n        let currentStep = 0\n        const timer = setInterval(() => {\n          currentStep++\n          setAutoActionProgress((currentStep / steps) * 100)\n          \n          if (currentStep >= steps) {\n            clearInterval(timer)\n            autoAction.action()\n            setIsVisible(false)\n          }\n        }, interval)\n        \n        return () => clearInterval(timer)\n      }\n    }, [autoAction, isVisible])\n    \n    const handleAccept = () => {\n      onAccept?.()\n      setIsVisible(false)\n    }\n    \n    const handleDismiss = () => {\n      onDismiss?.()\n      setIsVisible(false)\n    }\n    \n    if (!isVisible) return null\n    \n    return (\n      <AnimatePresence>\n        <motion.div\n          ref={ref}\n          initial={{ opacity: 0, y: 20, scale: 0.95 }}\n          animate={{ opacity: 1, y: 0, scale: 1 }}\n          exit={{ opacity: 0, y: -20, scale: 0.95 }}\n          transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n          className={cn(aiSuggestionVariants({ variant, size, urgency }), className)}\n          {...props}\n        >\n          {/* AI thinking animation overlay */}\n          {thinking && (\n            <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-blue-500/10 to-transparent animate-shimmer\" />\n          )}\n          \n          {/* Auto action progress bar */}\n          {autoAction && (\n            <div className=\"absolute top-0 left-0 h-1 bg-gradient-to-r from-blue-500 to-purple-500 transition-all duration-100 ease-linear\" \n                 style={{ width: `${autoActionProgress}%` }} />\n          )}\n          \n          <div className=\"flex items-start gap-3\">\n            {/* Icon */}\n            <div className=\"flex-shrink-0 mt-0.5\">\n              {icon || (\n                <div className=\"p-2 rounded-lg bg-gradient-to-r from-blue-500 to-purple-500\">\n                  <Sparkles className=\"h-4 w-4 text-white\" />\n                </div>\n              )}\n            </div>\n            \n            {/* Content */}\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <h4 className=\"text-sm font-medium text-foreground\">{title}</h4>\n                {confidence && (\n                  <span className=\"text-xs text-muted-foreground bg-glass-subtle px-2 py-0.5 rounded-full\">\n                    {Math.round(confidence * 100)}% confident\n                  </span>\n                )}\n              </div>\n              \n              {description && (\n                <p className=\"text-sm text-muted-foreground mb-3\">{description}</p>\n              )}\n              \n              {/* Actions */}\n              <div className=\"flex items-center gap-2\">\n                {actions || (\n                  <>\n                    {onAccept && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"premium\"\n                        onClick={handleAccept}\n                        className=\"h-8 px-3 text-xs\"\n                      >\n                        <Check className=\"h-3 w-3 mr-1\" />\n                        Accept\n                      </Button>\n                    )}\n                    {onDismiss && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={handleDismiss}\n                        className=\"h-8 px-3 text-xs\"\n                      >\n                        <X className=\"h-3 w-3 mr-1\" />\n                        Dismiss\n                      </Button>\n                    )}\n                  </>\n                )}\n                \n                {autoAction && (\n                  <span className=\"text-xs text-muted-foreground ml-auto\">\n                    Auto-{autoAction.label.toLowerCase()} in {Math.ceil((100 - autoActionProgress) / 20)}s\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n          \n          {/* Shimmer effect on hover */}\n          <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000 ease-out pointer-events-none\" />\n        </motion.div>\n      </AnimatePresence>\n    )\n  }\n)\nAISuggestion.displayName = \"AISuggestion\"\n\n// Smart Action Button - executes contextual actions\ninterface SmartActionButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  action: {\n    label: string\n    description?: string\n    confidence: number\n    execute: () => Promise<void> | void\n  }\n  loading?: boolean\n}\n\nconst SmartActionButton = React.forwardRef<HTMLButtonElement, SmartActionButtonProps>(\n  ({ action, loading, className, ...props }, ref) => {\n    const [isLoading, setIsLoading] = React.useState(false)\n    \n    const handleClick = async () => {\n      if (isLoading) return\n      \n      setIsLoading(true)\n      try {\n        await action.execute()\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    \n    return (\n      <Button\n        ref={ref}\n        variant=\"ai\"\n        onClick={handleClick}\n        loading={isLoading || loading}\n        className={cn(\n          \"relative overflow-hidden group\",\n          action.confidence > 0.8 && \"shadow-glow-primary\",\n          className\n        )}\n        {...props}\n      >\n        <span className=\"flex items-center gap-2\">\n          {action.label}\n          <ArrowRight className=\"h-4 w-4 transition-transform group-hover:translate-x-0.5\" />\n        </span>\n        \n        {action.description && (\n          <span className=\"sr-only\">{action.description}</span>\n        )}\n        \n        {/* Confidence indicator */}\n        <div \n          className=\"absolute bottom-0 left-0 h-0.5 bg-gradient-to-r from-green-500 to-blue-500 transition-all duration-300\"\n          style={{ width: `${action.confidence * 100}%` }}\n        />\n      </Button>\n    )\n  }\n)\nSmartActionButton.displayName = \"SmartActionButton\"\n\n// Context-aware helper text\ninterface AIHelperTextProps extends React.HTMLAttributes<HTMLDivElement> {\n  context: string\n  suggestion: string\n  variant?: \"default\" | \"tip\" | \"warning\" | \"success\"\n}\n\nconst AIHelperText = React.forwardRef<HTMLDivElement, AIHelperTextProps>(\n  ({ context, suggestion, variant = \"default\", className, ...props }, ref) => {\n    const variants = {\n      default: \"bg-glass-subtle border-glass-border text-muted-foreground\",\n      tip: \"bg-blue-50/50 dark:bg-blue-950/20 border-blue-200/50 dark:border-blue-800/50 text-blue-700 dark:text-blue-300\",\n      warning: \"bg-amber-50/50 dark:bg-amber-950/20 border-amber-200/50 dark:border-amber-800/50 text-amber-700 dark:text-amber-300\",\n      success: \"bg-emerald-50/50 dark:bg-emerald-950/20 border-emerald-200/50 dark:border-emerald-800/50 text-emerald-700 dark:text-emerald-300\",\n    }\n    \n    return (\n      <motion.div\n        ref={ref}\n        initial={{ opacity: 0, height: 0 }}\n        animate={{ opacity: 1, height: \"auto\" }}\n        exit={{ opacity: 0, height: 0 }}\n        className={cn(\n          \"border rounded-lg p-3 text-sm transition-all duration-200\",\n          variants[variant],\n          className\n        )}\n        {...props}\n      >\n        <div className=\"flex items-start gap-2\">\n          <Sparkles className=\"h-4 w-4 mt-0.5 flex-shrink-0\" />\n          <div>\n            <p className=\"font-medium mb-1\">AI Assistant</p>\n            <p className=\"text-xs opacity-80 mb-2\">Based on \"{context}\"</p>\n            <p>{suggestion}</p>\n          </div>\n        </div>\n      </motion.div>\n    )\n  }\n)\nAIHelperText.displayName = \"AIHelperText\"\n\nexport { AISuggestion, SmartActionButton, AIHelperText, aiSuggestionVariants }\n