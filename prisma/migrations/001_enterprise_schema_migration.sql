-- Loconomy Enterprise Schema Migration
-- Migration from SQLite to Advanced PostgreSQL with RLS
-- Generated by OmniQA.v∞ Architectural Enhancement

-- Enable necessary PostgreSQL extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";
CREATE EXTENSION IF NOT EXISTS "postgis";
CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";

-- ============================================
-- ENUMS - Define first for table dependencies
-- ============================================

-- Tenant Management
CREATE TYPE tenant_type AS ENUM ('city', 'region', 'enterprise', 'global');
CREATE TYPE tenant_status AS ENUM ('active', 'suspended', 'pending', 'archived');

-- User Management  
CREATE TYPE user_role AS ENUM ('guest', 'consumer', 'provider', 'admin', 'super_admin');
CREATE TYPE user_status AS ENUM ('active', 'pending', 'suspended', 'banned', 'deleted');
CREATE TYPE verification_status AS ENUM ('unverified', 'pending', 'verified', 'rejected');

-- Service & Booking
CREATE TYPE service_status AS ENUM ('draft', 'active', 'paused', 'suspended', 'deleted');
CREATE TYPE booking_status AS ENUM ('pending', 'confirmed', 'in_progress', 'completed', 'cancelled', 'refunded');
CREATE TYPE payment_status AS ENUM ('pending', 'processing', 'completed', 'failed', 'refunded', 'disputed');

-- Messaging
CREATE TYPE message_type AS ENUM ('text', 'image', 'file', 'audio', 'video', 'system', 'ai_response');
CREATE TYPE notification_type AS ENUM ('booking', 'payment', 'message', 'review', 'system', 'marketing');

-- ============================================
-- 1️⃣ TENANT & WORKSPACE MANAGEMENT
-- ============================================

CREATE TABLE tenants (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    slug VARCHAR(100) UNIQUE NOT NULL,
    type tenant_type NOT NULL DEFAULT 'city',
    status tenant_status NOT NULL DEFAULT 'active',
    
    -- Location & Service Area
    city VARCHAR(100) NOT NULL,
    state VARCHAR(100) NOT NULL,
    country VARCHAR(100) NOT NULL,
    timezone VARCHAR(50) NOT NULL DEFAULT 'UTC',
    coordinates GEOGRAPHY(POINT) NOT NULL,
    service_radius_km INTEGER DEFAULT 50,
    
    -- Branding
    logo_url TEXT,
    primary_color VARCHAR(7) DEFAULT '#3B82F6',
    secondary_color VARCHAR(7) DEFAULT '#8B5CF6',
    custom_domain VARCHAR(255),
    favicon_url TEXT,
    
    -- Settings
    settings JSONB DEFAULT '{}',
    features JSONB DEFAULT '{}',
    billing_config JSONB DEFAULT '{}',
    ai_config JSONB DEFAULT '{}',
    
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================
-- 2️⃣ USER MANAGEMENT & AUTHENTICATION
-- ============================================

CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    clerk_user_id VARCHAR(255) UNIQUE, -- Clerk integration
    
    -- Basic Info
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(20),
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    display_name VARCHAR(200),
    avatar_url TEXT,
    
    -- Role & Status
    role user_role NOT NULL DEFAULT 'consumer',
    status user_status NOT NULL DEFAULT 'active',
    verification_status verification_status DEFAULT 'unverified',
    
    -- Location
    current_location GEOGRAPHY(POINT),
    address_line1 VARCHAR(255),
    address_line2 VARCHAR(255),
    city VARCHAR(100),
    state VARCHAR(100),
    postal_code VARCHAR(20),
    country VARCHAR(100),
    
    -- Profile
    bio TEXT,
    skills TEXT[],
    languages VARCHAR(10)[] DEFAULT ARRAY['en'],
    timezone VARCHAR(50) DEFAULT 'UTC',
    
    -- AI & Preferences
    ai_preferences JSONB DEFAULT '{}',
    notification_settings JSONB DEFAULT '{}',
    privacy_settings JSONB DEFAULT '{}',
    
    -- Tracking
    last_active_at TIMESTAMPTZ DEFAULT NOW(),
    last_login_at TIMESTAMPTZ,
    login_count INTEGER DEFAULT 0,
    
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- User profiles for extended information
CREATE TABLE user_profiles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    
    -- Provider specific
    business_name VARCHAR(255),
    business_description TEXT,
    years_experience INTEGER,
    hourly_rate DECIMAL(10,2),
    
    -- Verification
    id_verified BOOLEAN DEFAULT FALSE,
    background_check_status verification_status DEFAULT 'unverified',
    insurance_verified BOOLEAN DEFAULT FALSE,
    
    -- Trust & Safety
    trust_score DECIMAL(3,2) DEFAULT 0.0,
    completion_rate DECIMAL(5,2) DEFAULT 0.0,
    response_time_minutes INTEGER,
    
    -- Portfolio
    portfolio_urls TEXT[],
    certifications JSONB DEFAULT '[]',
    work_samples JSONB DEFAULT '[]',
    
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================
-- 3️⃣ SERVICE LISTINGS & CATEGORIES
-- ============================================

CREATE TABLE service_categories (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    
    name VARCHAR(255) NOT NULL,
    slug VARCHAR(100) NOT NULL,
    description TEXT,
    icon_name VARCHAR(100),
    parent_id UUID REFERENCES service_categories(id),
    
    -- Display
    sort_order INTEGER DEFAULT 0,
    is_featured BOOLEAN DEFAULT FALSE,
    color VARCHAR(7) DEFAULT '#6B7280',
    
    -- AI Configuration
    ai_description_template TEXT,
    ai_pricing_guidance JSONB DEFAULT '{}',
    
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    
    UNIQUE(tenant_id, slug)
);

CREATE TABLE service_listings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    provider_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    category_id UUID NOT NULL REFERENCES service_categories(id),
    
    -- Basic Info
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    short_description VARCHAR(500),
    
    -- Pricing
    pricing_type VARCHAR(20) NOT NULL DEFAULT 'hourly', -- hourly, fixed, custom
    base_price DECIMAL(10,2),
    min_charge DECIMAL(10,2),
    max_price DECIMAL(10,2),
    travel_fee DECIMAL(10,2) DEFAULT 0,
    
    -- Service Details
    duration_minutes INTEGER,
    preparation_time_minutes INTEGER DEFAULT 0,
    service_radius_km INTEGER DEFAULT 25,
    
    -- Availability
    is_emergency_available BOOLEAN DEFAULT FALSE,
    urgency_fee_percentage DECIMAL(5,2) DEFAULT 0,
    advance_booking_hours INTEGER DEFAULT 2,
    
    -- Media
    featured_image_url TEXT,
    image_urls TEXT[],
    video_urls TEXT[],
    
    -- SEO & Discovery
    tags TEXT[],
    keywords TEXT[],
    seo_title VARCHAR(255),
    seo_description VARCHAR(500),
    
    -- Status & Metrics
    status service_status NOT NULL DEFAULT 'draft',
    view_count INTEGER DEFAULT 0,
    booking_count INTEGER DEFAULT 0,
    average_rating DECIMAL(3,2) DEFAULT 0.0,
    review_count INTEGER DEFAULT 0,
    
    -- AI Enhancement
    ai_optimized BOOLEAN DEFAULT FALSE,
    ai_score DECIMAL(3,2) DEFAULT 0.0,
    ai_suggestions JSONB DEFAULT '{}',
    
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================
-- 4️⃣ BOOKING & AVAILABILITY SYSTEM
-- ============================================

CREATE TABLE provider_availability (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    provider_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    
    -- Time Slots
    day_of_week INTEGER NOT NULL CHECK (day_of_week >= 0 AND day_of_week <= 6),
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    
    -- Recurrence
    is_recurring BOOLEAN DEFAULT TRUE,
    effective_from DATE DEFAULT CURRENT_DATE,
    effective_until DATE,
    
    -- Capacity
    max_concurrent_bookings INTEGER DEFAULT 1,
    buffer_minutes INTEGER DEFAULT 15,
    
    created_at TIMESTAMPTZ DEFAULT NOW(),
    
    UNIQUE(provider_id, day_of_week, start_time, end_time)
);

CREATE TABLE availability_exceptions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    provider_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    
    exception_date DATE NOT NULL,
    start_time TIME,
    end_time TIME,
    is_available BOOLEAN NOT NULL, -- FALSE for blocked time, TRUE for additional availability
    reason TEXT,
    
    created_at TIMESTAMPTZ DEFAULT NOW(),
    
    UNIQUE(provider_id, exception_date, start_time, end_time)
);

CREATE TABLE bookings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    customer_id UUID NOT NULL REFERENCES users(id),
    provider_id UUID NOT NULL REFERENCES users(id),
    service_id UUID NOT NULL REFERENCES service_listings(id),
    tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    
    -- Booking Details
    booking_reference VARCHAR(20) UNIQUE NOT NULL,
    scheduled_start TIMESTAMPTZ NOT NULL,
    scheduled_end TIMESTAMPTZ NOT NULL,
    actual_start TIMESTAMPTZ,
    actual_end TIMESTAMPTZ,
    
    -- Location
    service_location GEOGRAPHY(POINT),
    service_address TEXT,
    location_notes TEXT,
    
    -- Pricing
    base_amount DECIMAL(10,2) NOT NULL,
    travel_fee DECIMAL(10,2) DEFAULT 0,
    urgency_fee DECIMAL(10,2) DEFAULT 0,
    platform_fee DECIMAL(10,2) NOT NULL,
    total_amount DECIMAL(10,2) NOT NULL,
    
    -- Status & Tracking
    status booking_status NOT NULL DEFAULT 'pending',
    is_urgent BOOLEAN DEFAULT FALSE,
    cancellation_reason TEXT,
    cancelled_by UUID REFERENCES users(id),
    cancelled_at TIMESTAMPTZ,
    
    -- Communication
    special_instructions TEXT,
    provider_notes TEXT,
    
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================
-- 5️⃣ PAYMENT & TRANSACTION SYSTEM
-- ============================================

CREATE TABLE transactions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    booking_id UUID REFERENCES bookings(id),
    tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    
    -- Stripe Integration
    stripe_payment_intent_id VARCHAR(255),
    stripe_charge_id VARCHAR(255),
    stripe_transfer_id VARCHAR(255),
    
    -- Transaction Details
    transaction_type VARCHAR(50) NOT NULL, -- payment, refund, transfer, fee
    amount DECIMAL(10,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'USD',
    
    -- Participants
    payer_id UUID REFERENCES users(id),
    recipient_id UUID REFERENCES users(id),
    
    -- Status
    status payment_status NOT NULL DEFAULT 'pending',
    stripe_status VARCHAR(50),
    
    -- Timing
    processed_at TIMESTAMPTZ,
    settled_at TIMESTAMPTZ,
    
    -- Metadata
    metadata JSONB DEFAULT '{}',
    stripe_metadata JSONB DEFAULT '{}',
    
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================
-- 6️⃣ MESSAGING & COMMUNICATION
-- ============================================

CREATE TABLE conversations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    booking_id UUID REFERENCES bookings(id),
    tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    
    -- Participants
    participant_ids UUID[] NOT NULL,
    is_group BOOLEAN DEFAULT FALSE,
    
    -- Status
    is_active BOOLEAN DEFAULT TRUE,
    last_message_at TIMESTAMPTZ DEFAULT NOW(),
    
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE messages (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,
    sender_id UUID NOT NULL REFERENCES users(id),
    tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    
    -- Content
    content TEXT,
    message_type message_type DEFAULT 'text',
    media_urls TEXT[],
    
    -- AI Enhancement
    is_ai_generated BOOLEAN DEFAULT FALSE,
    ai_context JSONB DEFAULT '{}',
    
    -- Status
    is_read BOOLEAN DEFAULT FALSE,
    read_at TIMESTAMPTZ,
    is_edited BOOLEAN DEFAULT FALSE,
    edited_at TIMESTAMPTZ,
    
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================
-- 7️⃣ REVIEWS & RATINGS
-- ============================================

CREATE TABLE reviews (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    booking_id UUID NOT NULL REFERENCES bookings(id),
    reviewer_id UUID NOT NULL REFERENCES users(id),
    reviewee_id UUID NOT NULL REFERENCES users(id),
    tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    
    -- Rating & Review
    rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
    title VARCHAR(255),
    comment TEXT,
    
    -- Detailed Ratings
    quality_rating INTEGER CHECK (quality_rating >= 1 AND quality_rating <= 5),
    timeliness_rating INTEGER CHECK (timeliness_rating >= 1 AND timeliness_rating <= 5),
    communication_rating INTEGER CHECK (communication_rating >= 1 AND communication_rating <= 5),
    value_rating INTEGER CHECK (value_rating >= 1 AND value_rating <= 5),
    
    -- Media
    image_urls TEXT[],
    
    -- Moderation
    is_verified BOOLEAN DEFAULT FALSE,
    is_featured BOOLEAN DEFAULT FALSE,
    moderation_status VARCHAR(20) DEFAULT 'pending',
    moderated_at TIMESTAMPTZ,
    moderated_by UUID REFERENCES users(id),
    
    -- Response
    provider_response TEXT,
    provider_response_at TIMESTAMPTZ,
    
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    
    UNIQUE(booking_id, reviewer_id)
);

-- ============================================
-- 8️⃣ NOTIFICATIONS & ALERTS
-- ============================================

CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    
    -- Content
    type notification_type NOT NULL,
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    
    -- Action
    action_url TEXT,
    action_label VARCHAR(100),
    
    -- Related Entities
    booking_id UUID REFERENCES bookings(id),
    conversation_id UUID REFERENCES conversations(id),
    
    -- Status
    is_read BOOLEAN DEFAULT FALSE,
    read_at TIMESTAMPTZ,
    
    -- Delivery
    email_sent BOOLEAN DEFAULT FALSE,
    push_sent BOOLEAN DEFAULT FALSE,
    sms_sent BOOLEAN DEFAULT FALSE,
    
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================
-- 9️⃣ AI & ANALYTICS
-- ============================================

CREATE TABLE ai_interactions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id),
    tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    
    -- Interaction Details
    interaction_type VARCHAR(50) NOT NULL, -- chat, recommendation, optimization
    input_text TEXT,
    output_text TEXT,
    
    -- AI Model
    model_name VARCHAR(100),
    model_version VARCHAR(50),
    confidence_score DECIMAL(3,2),
    
    -- Context
    context JSONB DEFAULT '{}',
    session_id UUID,
    
    -- Performance
    processing_time_ms INTEGER,
    token_usage INTEGER,
    
    created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE analytics_events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    tenant_id UUID NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(id),
    session_id UUID,
    
    -- Event Details
    event_name VARCHAR(100) NOT NULL,
    event_category VARCHAR(50),
    properties JSONB DEFAULT '{}',
    
    -- Context
    page_url TEXT,
    referrer TEXT,
    user_agent TEXT,
    ip_address INET,
    
    -- Location
    country VARCHAR(2),
    city VARCHAR(100),
    coordinates GEOGRAPHY(POINT),
    
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================
-- 🔒 ROW LEVEL SECURITY (RLS) POLICIES
-- ============================================

-- Enable RLS on all tables
ALTER TABLE tenants ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE service_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE service_listings ENABLE ROW LEVEL SECURITY;
ALTER TABLE provider_availability ENABLE ROW LEVEL SECURITY;
ALTER TABLE availability_exceptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE bookings ENABLE ROW LEVEL SECURITY;
ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE conversations ENABLE ROW LEVEL SECURITY;
ALTER TABLE messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE ai_interactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE analytics_events ENABLE ROW LEVEL SECURITY;

-- Tenant isolation policies
CREATE POLICY tenant_isolation_users ON users
    FOR ALL USING (tenant_id = current_setting('app.current_tenant_id')::UUID);

CREATE POLICY tenant_isolation_service_listings ON service_listings
    FOR ALL USING (tenant_id = current_setting('app.current_tenant_id')::UUID);

CREATE POLICY tenant_isolation_bookings ON bookings
    FOR ALL USING (tenant_id = current_setting('app.current_tenant_id')::UUID);

-- User-based access policies
CREATE POLICY user_access_own_data ON users
    FOR ALL USING (id = current_setting('app.current_user_id')::UUID);

CREATE POLICY provider_access_own_listings ON service_listings
    FOR ALL USING (provider_id = current_setting('app.current_user_id')::UUID);

CREATE POLICY booking_participants_access ON bookings
    FOR ALL USING (
        customer_id = current_setting('app.current_user_id')::UUID OR 
        provider_id = current_setting('app.current_user_id')::UUID
    );

-- Admin access policies
CREATE POLICY admin_full_access ON users
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE id = current_setting('app.current_user_id')::UUID 
            AND role IN ('admin', 'super_admin')
        )
    );

-- ============================================
-- 📊 INDEXES FOR PERFORMANCE
-- ============================================

-- Geographic indexes
CREATE INDEX idx_tenants_coordinates ON tenants USING GIST (coordinates);
CREATE INDEX idx_users_current_location ON users USING GIST (current_location);
CREATE INDEX idx_service_listings_location ON service_listings USING GIST (
    ST_MakePoint(
        (SELECT ST_X(coordinates) FROM tenants WHERE id = service_listings.tenant_id),
        (SELECT ST_Y(coordinates) FROM tenants WHERE id = service_listings.tenant_id)
    )
);

-- Search and filtering indexes
CREATE INDEX idx_service_listings_search ON service_listings USING GIN (
    to_tsvector('english', title || ' ' || description || ' ' || array_to_string(tags, ' '))
);
CREATE INDEX idx_service_listings_category ON service_listings (category_id, status);
CREATE INDEX idx_service_listings_provider ON service_listings (provider_id, status);

-- Performance indexes
CREATE INDEX idx_bookings_time_range ON bookings (scheduled_start, scheduled_end);
CREATE INDEX idx_bookings_status ON bookings (status, tenant_id);
CREATE INDEX idx_messages_conversation ON messages (conversation_id, created_at);
CREATE INDEX idx_notifications_user_unread ON notifications (user_id, is_read, created_at);

-- ============================================
-- 🔧 FUNCTIONS & TRIGGERS
-- ============================================

-- Update timestamp trigger
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply update triggers
CREATE TRIGGER update_tenants_updated_at BEFORE UPDATE ON tenants 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON user_profiles 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_service_listings_updated_at BEFORE UPDATE ON service_listings 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_bookings_updated_at BEFORE UPDATE ON bookings 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Booking reference generation
CREATE OR REPLACE FUNCTION generate_booking_reference()
RETURNS TRIGGER AS $$
BEGIN
    NEW.booking_reference = 'LCN-' || TO_CHAR(NOW(), 'YYYYMMDD') || '-' || UPPER(SUBSTR(MD5(RANDOM()::TEXT), 1, 6));
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER set_booking_reference BEFORE INSERT ON bookings
    FOR EACH ROW EXECUTE FUNCTION generate_booking_reference();

-- Trust score calculation
CREATE OR REPLACE FUNCTION update_trust_score()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE user_profiles 
    SET trust_score = (
        SELECT COALESCE(AVG(rating), 0.0) * 0.6 + 
               COALESCE(completion_rate / 100.0, 0.0) * 0.4
        FROM reviews r
        JOIN bookings b ON r.booking_id = b.id
        WHERE b.provider_id = NEW.reviewee_id
    )
    WHERE user_id = NEW.reviewee_id;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_provider_trust_score AFTER INSERT ON reviews
    FOR EACH ROW EXECUTE FUNCTION update_trust_score();

-- ============================================
-- 📊 INITIAL DATA & CONFIGURATION
-- ============================================

-- Insert default tenant for development
INSERT INTO tenants (name, slug, city, state, country, coordinates) VALUES
('Loconomy Global', 'global', 'San Francisco', 'California', 'United States', 
 ST_GeogFromText('POINT(-122.4194 37.7749)'));

-- Service categories
INSERT INTO service_categories (tenant_id, name, slug, description, icon_name, sort_order) VALUES
((SELECT id FROM tenants WHERE slug = 'global'), 'Home Services', 'home-services', 'Cleaning, repairs, and maintenance', 'home', 1),
((SELECT id FROM tenants WHERE slug = 'global'), 'Personal Care', 'personal-care', 'Beauty, wellness, and health services', 'heart', 2),
((SELECT id FROM tenants WHERE slug = 'global'), 'Professional Services', 'professional-services', 'Business, legal, and consulting', 'briefcase', 3),
((SELECT id FROM tenants WHERE slug = 'global'), 'Transportation', 'transportation', 'Moving, delivery, and logistics', 'truck', 4),
((SELECT id FROM tenants WHERE slug = 'global'), 'Events & Entertainment', 'events', 'Planning, catering, and entertainment', 'calendar', 5);
