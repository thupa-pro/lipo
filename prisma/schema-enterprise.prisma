// Loconomy Enterprise Prisma Schema
// AI-Native Marketplace with Multi-Tenant Architecture
// Generated by OmniQA.v∞ Architectural Enhancement

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp"), pgcrypto, postgis]
}

// ============================================
// ENUMS
// ============================================

enum TenantType {
  city
  region
  enterprise
  global
}

enum TenantStatus {
  active
  suspended
  pending
  archived
}

enum UserRole {
  guest
  consumer
  provider
  admin
  super_admin
}

enum UserStatus {
  active
  pending
  suspended
  banned
  deleted
}

enum VerificationStatus {
  unverified
  pending
  verified
  rejected
}

enum ServiceStatus {
  draft
  active
  paused
  suspended
  deleted
}

enum BookingStatus {
  pending
  confirmed
  in_progress
  completed
  cancelled
  refunded
}

enum PaymentStatus {
  pending
  processing
  completed
  failed
  refunded
  disputed
}

enum MessageType {
  text
  image
  file
  audio
  video
  system
  ai_response
}

enum NotificationType {
  booking
  payment
  message
  review
  system
  marketing
}

// ============================================
// 1️⃣ TENANT & WORKSPACE MANAGEMENT
// ============================================

model Tenant {
  id     String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name   String      @db.VarChar(255)
  slug   String      @unique @db.VarChar(100)
  type   TenantType  @default(city)
  status TenantStatus @default(active)

  // Location & Service Area
  city              String @db.VarChar(100)
  state             String @db.VarChar(100)
  country           String @db.VarChar(100)
  timezone          String @default("UTC") @db.VarChar(50)
  coordinates       String // GEOGRAPHY(POINT) - stored as text, handled in app
  serviceRadiusKm   Int?   @default(50) @map("service_radius_km")

  // Branding
  logoUrl        String? @map("logo_url")
  primaryColor   String? @default("#3B82F6") @db.VarChar(7) @map("primary_color")
  secondaryColor String? @default("#8B5CF6") @db.VarChar(7) @map("secondary_color")
  customDomain   String? @db.VarChar(255) @map("custom_domain")
  faviconUrl     String? @map("favicon_url")

  // Settings (JSONB)
  settings      Json @default("{}") @db.JsonB
  features      Json @default("{}") @db.JsonB
  billingConfig Json @default("{}") @db.JsonB @map("billing_config")
  aiConfig      Json @default("{}") @db.JsonB @map("ai_config")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  users             User[]
  userProfiles      UserProfile[]
  serviceCategories ServiceCategory[]
  serviceListings   ServiceListing[]
  bookings          Booking[]
  transactions      Transaction[]
  conversations     Conversation[]
  messages          Message[]
  reviews           Review[]
  notifications     Notification[]
  aiInteractions    AIInteraction[]
  analyticsEvents   AnalyticsEvent[]
  providerAvailability ProviderAvailability[]
  availabilityExceptions AvailabilityException[]

  @@map("tenants")
}

// ============================================
// 2️⃣ USER MANAGEMENT & AUTHENTICATION
// ============================================

model User {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tenantId     String     @map("tenant_id") @db.Uuid
  clerkUserId  String?    @unique @map("clerk_user_id") @db.VarChar(255)

  // Basic Info
  email       String  @unique @db.VarChar(255)
  phone       String? @db.VarChar(20)
  firstName   String? @map("first_name") @db.VarChar(100)
  lastName    String? @map("last_name") @db.VarChar(100)
  displayName String? @map("display_name") @db.VarChar(200)
  avatarUrl   String? @map("avatar_url")

  // Role & Status
  role               UserRole           @default(consumer)
  status             UserStatus         @default(active)
  verificationStatus VerificationStatus @default(unverified) @map("verification_status")

  // Location
  currentLocation String? @map("current_location") // GEOGRAPHY(POINT)
  addressLine1    String? @map("address_line1") @db.VarChar(255)
  addressLine2    String? @map("address_line2") @db.VarChar(255)
  city            String? @db.VarChar(100)
  state           String? @db.VarChar(100)
  postalCode      String? @map("postal_code") @db.VarChar(20)
  country         String? @db.VarChar(100)

  // Profile
  bio       String?   @db.Text
  skills    String[]  @db.Text
  languages String[]  @default(["en"]) @db.VarChar(10)
  timezone  String?   @default("UTC") @db.VarChar(50)

  // AI & Preferences (JSONB)
  aiPreferences          Json @default("{}") @db.JsonB @map("ai_preferences")
  notificationSettings  Json @default("{}") @db.JsonB @map("notification_settings")
  privacySettings       Json @default("{}") @db.JsonB @map("privacy_settings")

  // Tracking
  lastActiveAt DateTime  @default(now()) @map("last_active_at") @db.Timestamptz
  lastLoginAt  DateTime? @map("last_login_at") @db.Timestamptz
  loginCount   Int       @default(0) @map("login_count")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  tenant                 Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  profile                UserProfile?
  serviceListings        ServiceListing[]
  customerBookings       Booking[]                @relation("CustomerBookings")
  providerBookings       Booking[]                @relation("ProviderBookings")
  sentMessages           Message[]
  writtenReviews         Review[]                 @relation("ReviewsByUser")
  receivedReviews        Review[]                 @relation("ReviewsForUser")
  notifications          Notification[]
  aiInteractions         AIInteraction[]
  payerTransactions      Transaction[]            @relation("PayerTransactions")
  recipientTransactions  Transaction[]            @relation("RecipientTransactions")
  providerAvailability   ProviderAvailability[]
  availabilityExceptions AvailabilityException[]
  cancelledBookings      Booking[]                @relation("CancelledByUser")

  @@map("users")
}

model UserProfile {
  id       String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId   String @unique @map("user_id") @db.Uuid
  tenantId String @map("tenant_id") @db.Uuid

  // Provider specific
  businessName        String? @map("business_name") @db.VarChar(255)
  businessDescription String? @map("business_description") @db.Text
  yearsExperience     Int?    @map("years_experience")
  hourlyRate          Decimal? @map("hourly_rate") @db.Decimal(10, 2)

  // Verification
  idVerified              Boolean            @default(false) @map("id_verified")
  backgroundCheckStatus   VerificationStatus @default(unverified) @map("background_check_status")
  insuranceVerified       Boolean            @default(false) @map("insurance_verified")

  // Trust & Safety
  trustScore         Decimal @default(0.0) @map("trust_score") @db.Decimal(3, 2)
  completionRate     Decimal @default(0.0) @map("completion_rate") @db.Decimal(5, 2)
  responseTimeMinutes Int?   @map("response_time_minutes")

  // Portfolio (JSONB)
  portfolioUrls   String[] @map("portfolio_urls") @db.Text
  certifications  Json     @default("[]") @db.JsonB
  workSamples     Json     @default("[]") @db.JsonB @map("work_samples")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// ============================================
// 3️⃣ SERVICE LISTINGS & CATEGORIES
// ============================================

model ServiceCategory {
  id       String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tenantId String  @map("tenant_id") @db.Uuid
  
  name        String  @db.VarChar(255)
  slug        String  @db.VarChar(100)
  description String? @db.Text
  iconName    String? @map("icon_name") @db.VarChar(100)
  parentId    String? @map("parent_id") @db.Uuid

  // Display
  sortOrder   Int     @default(0) @map("sort_order")
  isFeatured  Boolean @default(false) @map("is_featured")
  color       String  @default("#6B7280") @db.VarChar(7)

  // AI Configuration
  aiDescriptionTemplate String? @map("ai_description_template") @db.Text
  aiPricingGuidance     Json    @default("{}") @db.JsonB @map("ai_pricing_guidance")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parent          ServiceCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        ServiceCategory[] @relation("CategoryHierarchy")
  serviceListings ServiceListing[]

  @@unique([tenantId, slug])
  @@map("service_categories")
}

model ServiceListing {
  id         String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  providerId String @map("provider_id") @db.Uuid
  tenantId   String @map("tenant_id") @db.Uuid
  categoryId String @map("category_id") @db.Uuid

  // Basic Info
  title            String  @db.VarChar(255)
  description      String  @db.Text
  shortDescription String? @map("short_description") @db.VarChar(500)

  // Pricing
  pricingType String   @default("hourly") @map("pricing_type") @db.VarChar(20)
  basePrice   Decimal? @map("base_price") @db.Decimal(10, 2)
  minCharge   Decimal? @map("min_charge") @db.Decimal(10, 2)
  maxPrice    Decimal? @map("max_price") @db.Decimal(10, 2)
  travelFee   Decimal  @default(0) @map("travel_fee") @db.Decimal(10, 2)

  // Service Details
  durationMinutes           Int? @map("duration_minutes")
  preparationTimeMinutes    Int  @default(0) @map("preparation_time_minutes")
  serviceRadiusKm           Int  @default(25) @map("service_radius_km")

  // Availability
  isEmergencyAvailable    Boolean @default(false) @map("is_emergency_available")
  urgencyFeePercentage    Decimal @default(0) @map("urgency_fee_percentage") @db.Decimal(5, 2)
  advanceBookingHours     Int     @default(2) @map("advance_booking_hours")

  // Media
  featuredImageUrl String?  @map("featured_image_url")
  imageUrls        String[] @map("image_urls") @db.Text
  videoUrls        String[] @map("video_urls") @db.Text

  // SEO & Discovery
  tags           String[] @db.Text
  keywords       String[] @db.Text
  seoTitle       String?  @map("seo_title") @db.VarChar(255)
  seoDescription String?  @map("seo_description") @db.VarChar(500)

  // Status & Metrics
  status        ServiceStatus @default(draft)
  viewCount     Int           @default(0) @map("view_count")
  bookingCount  Int           @default(0) @map("booking_count")
  averageRating Decimal       @default(0.0) @map("average_rating") @db.Decimal(3, 2)
  reviewCount   Int           @default(0) @map("review_count")

  // AI Enhancement
  aiOptimized   Boolean @default(false) @map("ai_optimized")
  aiScore       Decimal @default(0.0) @map("ai_score") @db.Decimal(3, 2)
  aiSuggestions Json    @default("{}") @db.JsonB @map("ai_suggestions")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  provider User            @relation(fields: [providerId], references: [id], onDelete: Cascade)
  tenant   Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category ServiceCategory @relation(fields: [categoryId], references: [id])
  bookings Booking[]

  @@map("service_listings")
}

// ============================================
// 4️⃣ BOOKING & AVAILABILITY SYSTEM
// ============================================

model ProviderAvailability {
  id         String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  providerId String @map("provider_id") @db.Uuid
  tenantId   String @map("tenant_id") @db.Uuid

  // Time Slots
  dayOfWeek Int  @map("day_of_week") // 0-6 (Sunday-Saturday)
  startTime String @map("start_time") @db.Time
  endTime   String @map("end_time") @db.Time

  // Recurrence
  isRecurring     Boolean @default(true) @map("is_recurring")
  effectiveFrom   DateTime @default(now()) @map("effective_from") @db.Date
  effectiveUntil  DateTime? @map("effective_until") @db.Date

  // Capacity
  maxConcurrentBookings Int @default(1) @map("max_concurrent_bookings")
  bufferMinutes         Int @default(15) @map("buffer_minutes")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  provider User   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([providerId, dayOfWeek, startTime, endTime])
  @@map("provider_availability")
}

model AvailabilityException {
  id         String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  providerId String @map("provider_id") @db.Uuid
  tenantId   String @map("tenant_id") @db.Uuid

  exceptionDate DateTime @map("exception_date") @db.Date
  startTime     String?  @map("start_time") @db.Time
  endTime       String?  @map("end_time") @db.Time
  isAvailable   Boolean  @map("is_available") // FALSE for blocked, TRUE for additional
  reason        String?  @db.Text

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  provider User   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([providerId, exceptionDate, startTime, endTime])
  @@map("availability_exceptions")
}

model Booking {
  id               String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customerId       String @map("customer_id") @db.Uuid
  providerId       String @map("provider_id") @db.Uuid
  serviceId        String @map("service_id") @db.Uuid
  tenantId         String @map("tenant_id") @db.Uuid

  // Booking Details
  bookingReference String   @unique @map("booking_reference") @db.VarChar(20)
  scheduledStart   DateTime @map("scheduled_start") @db.Timestamptz
  scheduledEnd     DateTime @map("scheduled_end") @db.Timestamptz
  actualStart      DateTime? @map("actual_start") @db.Timestamptz
  actualEnd        DateTime? @map("actual_end") @db.Timestamptz

  // Location
  serviceLocation String? @map("service_location") // GEOGRAPHY(POINT)
  serviceAddress  String? @map("service_address") @db.Text
  locationNotes   String? @map("location_notes") @db.Text

  // Pricing
  baseAmount    Decimal @map("base_amount") @db.Decimal(10, 2)
  travelFee     Decimal @default(0) @map("travel_fee") @db.Decimal(10, 2)
  urgencyFee    Decimal @default(0) @map("urgency_fee") @db.Decimal(10, 2)
  platformFee   Decimal @map("platform_fee") @db.Decimal(10, 2)
  totalAmount   Decimal @map("total_amount") @db.Decimal(10, 2)

  // Status & Tracking
  status              BookingStatus @default(pending)
  isUrgent            Boolean       @default(false) @map("is_urgent")
  cancellationReason  String?       @map("cancellation_reason") @db.Text
  cancelledBy         String?       @map("cancelled_by") @db.Uuid
  cancelledAt         DateTime?     @map("cancelled_at") @db.Timestamptz

  // Communication
  specialInstructions String? @map("special_instructions") @db.Text
  providerNotes       String? @map("provider_notes") @db.Text

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  customer      User            @relation("CustomerBookings", fields: [customerId], references: [id])
  provider      User            @relation("ProviderBookings", fields: [providerId], references: [id])
  service       ServiceListing  @relation(fields: [serviceId], references: [id])
  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  cancelledByUser User?         @relation("CancelledByUser", fields: [cancelledBy], references: [id])
  transactions  Transaction[]
  reviews       Review[]
  conversations Conversation[]

  @@map("bookings")
}

// ============================================
// 5️⃣ PAYMENT & TRANSACTION SYSTEM
// ============================================

model Transaction {
  id        String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bookingId String? @map("booking_id") @db.Uuid
  tenantId  String  @map("tenant_id") @db.Uuid

  // Stripe Integration
  stripePaymentIntentId String? @map("stripe_payment_intent_id") @db.VarChar(255)
  stripeChargeId        String? @map("stripe_charge_id") @db.VarChar(255)
  stripeTransferId      String? @map("stripe_transfer_id") @db.VarChar(255)

  // Transaction Details
  transactionType String  @map("transaction_type") @db.VarChar(50)
  amount          Decimal @db.Decimal(10, 2)
  currency        String  @default("USD") @db.VarChar(3)

  // Participants
  payerId     String? @map("payer_id") @db.Uuid
  recipientId String? @map("recipient_id") @db.Uuid

  // Status
  status       PaymentStatus @default(pending)
  stripeStatus String?       @map("stripe_status") @db.VarChar(50)

  // Timing
  processedAt DateTime? @map("processed_at") @db.Timestamptz
  settledAt   DateTime? @map("settled_at") @db.Timestamptz

  // Metadata
  metadata       Json @default("{}") @db.JsonB
  stripeMetadata Json @default("{}") @db.JsonB @map("stripe_metadata")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  booking   Booking? @relation(fields: [bookingId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  payer     User?    @relation("PayerTransactions", fields: [payerId], references: [id])
  recipient User?    @relation("RecipientTransactions", fields: [recipientId], references: [id])

  @@map("transactions")
}

// ============================================
// 6️⃣ MESSAGING & COMMUNICATION
// ============================================

model Conversation {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bookingId      String?   @map("booking_id") @db.Uuid
  tenantId       String    @map("tenant_id") @db.Uuid

  // Participants
  participantIds String[]  @map("participant_ids") @db.Uuid
  isGroup        Boolean   @default(false) @map("is_group")

  // Status
  isActive        Boolean   @default(true) @map("is_active")
  lastMessageAt   DateTime  @default(now()) @map("last_message_at") @db.Timestamptz

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  booking  Booking? @relation(fields: [bookingId], references: [id])
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  conversationId String @map("conversation_id") @db.Uuid
  senderId       String @map("sender_id") @db.Uuid
  tenantId       String @map("tenant_id") @db.Uuid

  // Content
  content     String?     @db.Text
  messageType MessageType @default(text) @map("message_type")
  mediaUrls   String[]    @map("media_urls") @db.Text

  // AI Enhancement
  isAiGenerated Boolean @default(false) @map("is_ai_generated")
  aiContext     Json    @default("{}") @db.JsonB @map("ai_context")

  // Status
  isRead   Boolean   @default(false) @map("is_read")
  readAt   DateTime? @map("read_at") @db.Timestamptz
  isEdited Boolean   @default(false) @map("is_edited")
  editedAt DateTime? @map("edited_at") @db.Timestamptz

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id])
  tenant       Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// ============================================
// 7️⃣ REVIEWS & RATINGS
// ============================================

model Review {
  id         String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bookingId  String @map("booking_id") @db.Uuid
  reviewerId String @map("reviewer_id") @db.Uuid
  revieweeId String @map("reviewee_id") @db.Uuid
  tenantId   String @map("tenant_id") @db.Uuid

  // Rating & Review
  rating  Int     @db.SmallInt
  title   String? @db.VarChar(255)
  comment String? @db.Text

  // Detailed Ratings
  qualityRating       Int? @map("quality_rating") @db.SmallInt
  timelinessRating    Int? @map("timeliness_rating") @db.SmallInt
  communicationRating Int? @map("communication_rating") @db.SmallInt
  valueRating         Int? @map("value_rating") @db.SmallInt

  // Media
  imageUrls String[] @map("image_urls") @db.Text

  // Moderation
  isVerified        Boolean   @default(false) @map("is_verified")
  isFeatured        Boolean   @default(false) @map("is_featured")
  moderationStatus  String    @default("pending") @map("moderation_status") @db.VarChar(20)
  moderatedAt       DateTime? @map("moderated_at") @db.Timestamptz
  moderatedBy       String?   @map("moderated_by") @db.Uuid

  // Response
  providerResponse   String?   @map("provider_response") @db.Text
  providerResponseAt DateTime? @map("provider_response_at") @db.Timestamptz

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  booking  Booking @relation(fields: [bookingId], references: [id])
  reviewer User    @relation("ReviewsByUser", fields: [reviewerId], references: [id])
  reviewee User    @relation("ReviewsForUser", fields: [revieweeId], references: [id])
  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([bookingId, reviewerId])
  @@map("reviews")
}

// ============================================
// 8️⃣ NOTIFICATIONS & ALERTS
// ============================================

model Notification {
  id     String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId String           @map("user_id") @db.Uuid
  tenantId String         @map("tenant_id") @db.Uuid

  // Content
  type    NotificationType
  title   String           @db.VarChar(255)
  message String           @db.Text

  // Action
  actionUrl   String? @map("action_url") @db.Text
  actionLabel String? @map("action_label") @db.VarChar(100)

  // Related Entities
  bookingId      String? @map("booking_id") @db.Uuid
  conversationId String? @map("conversation_id") @db.Uuid

  // Status
  isRead Boolean   @default(false) @map("is_read")
  readAt DateTime? @map("read_at") @db.Timestamptz

  // Delivery
  emailSent Boolean @default(false) @map("email_sent")
  pushSent  Boolean @default(false) @map("push_sent")
  smsSent   Boolean @default(false) @map("sms_sent")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// ============================================
// 9️⃣ AI & ANALYTICS
// ============================================

model AIInteraction {
  id       String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId   String? @map("user_id") @db.Uuid
  tenantId String  @map("tenant_id") @db.Uuid

  // Interaction Details
  interactionType String  @map("interaction_type") @db.VarChar(50)
  inputText       String? @map("input_text") @db.Text
  outputText      String? @map("output_text") @db.Text

  // AI Model
  modelName       String?  @map("model_name") @db.VarChar(100)
  modelVersion    String?  @map("model_version") @db.VarChar(50)
  confidenceScore Decimal? @map("confidence_score") @db.Decimal(3, 2)

  // Context
  context   Json    @default("{}") @db.JsonB
  sessionId String? @map("session_id") @db.Uuid

  // Performance
  processingTimeMs Int? @map("processing_time_ms")
  tokenUsage       Int? @map("token_usage")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user   User?  @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("ai_interactions")
}

model AnalyticsEvent {
  id        String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tenantId  String  @map("tenant_id") @db.Uuid
  userId    String? @map("user_id") @db.Uuid
  sessionId String? @map("session_id") @db.Uuid

  // Event Details
  eventName     String @map("event_name") @db.VarChar(100)
  eventCategory String? @map("event_category") @db.VarChar(50)
  properties    Json   @default("{}") @db.JsonB

  // Context
  pageUrl   String? @map("page_url") @db.Text
  referrer  String? @db.Text
  userAgent String? @map("user_agent") @db.Text
  ipAddress String? @map("ip_address") @db.Inet

  // Location
  country     String? @db.VarChar(2)
  city        String? @db.VarChar(100)
  coordinates String? // GEOGRAPHY(POINT)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("analytics_events")
}
